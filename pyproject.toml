[project]
name = "angry-pixie-pricing"
version = "0.1.0"
description = "European Electricity Price Analysis Tool"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pandas>=2.2.0",
    "numpy>=2.0.0",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.22.0",
    "plotext>=5.2.0",
    "requests>=2.32.0",
    "python-dateutil>=2.9.0",
    "pydantic>=2.8.0",
    "holidays>=0.50",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
]

[project.scripts]
angry-pixie = "angry_pixie_pricing.main:cli"

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=8.3.0",
    "pytest-mock>=3.12.0",
    
    # Code Quality
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    
    # Development
    "ipython>=8.26.0",
    "rich>=13.8.0",            # Better terminal output
    
    # Security
    "bandit>=1.7.10",          # Security linting
    "safety>=3.2.0",           # Dependency vulnerability scanning
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/angry_pixie_pricing"]

[tool.ruff]
target-version = "py312"
line-length = 120
src = ["src"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RUF",    # Ruff-specific rules
    
    # Security & Safety
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except (catch Exception)
    
    # Code Quality
    "A",      # flake8-builtins (shadowing builtins)
    "COM",    # flake8-commas (trailing commas)
    "C90",    # mccabe (complexity)
    "DTZ",    # flake8-datetimez (timezone safety)
    "EM",     # flake8-errmsg (error message formatting)
    "ICN",    # flake8-import-conventions (import naming)
    "N",      # pep8-naming (naming conventions)
    "PIE",    # flake8-pie (misc improvements)
    "PT",     # flake8-pytest-style (pytest best practices)
    "Q",      # flake8-quotes (quote consistency)
    "RSE",    # flake8-raise (raise statement improvements)
    "RET",    # flake8-return (return statement improvements)
    "TCH",    # flake8-type-checking (TYPE_CHECKING imports)
    "T20",    # flake8-print (no print statements in production)
    "PD",     # pandas-vet (pandas best practices)
]
ignore = [
    # Allow print statements (we use them for CLI output)
    "T201",   # print statements
    
    # Allow some complexity for data analysis code
    "C901",   # complex-structure (>10 branches)
    
    # Allow some pandas patterns
    "PD901",  # pandas-df-variable-name (allow 'df')
    
    # Allow implicit string concatenation in multiline contexts
    "ISC001", # single-line-implicit-string-concatenation
    
    # Ignore datetime timezone warnings for now (will revisit)
    "DTZ001", # datetime() without tzinfo
    "DTZ005", # datetime.now() without tz
    "DTZ007", # datetime.strptime() without %z
    "DTZ011", # date.today() used
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert statements in tests

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
strict = true
show_error_codes = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"